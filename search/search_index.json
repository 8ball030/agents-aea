{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The AEA is a framework for autonomous economic agent (AEA) development. It gives developers a quick and efficient way to build autonomous economic agents. The framework is super modular, easily extensible, and highly composable. It is ideal for Reinforcement Learning scenarios. Our vision Fetch.AI intends the AEA framework to have two focused commercial roles. Open source company We want to build infrastructure with which external parties build their own solutions. Platform for start ups By operating as a platform for start ups, we hope to solve the chicken-or-egg problem through incentive schemes. Agents An autonomous economic agent (AEA) is an intelligent agent whose goal is to generate economic value for its owner. Their super powers lie in their ability to autonomously acquire new skills. AEAs achieve their goals with the help of the OEF and the Fetch.AI Ledger. Third party systems, such as Ethereum, may also allow AEA integration. Note Work in progress.","title":"What is the AEA?"},{"location":"#our-vision","text":"Fetch.AI intends the AEA framework to have two focused commercial roles.","title":"Our vision"},{"location":"#open-source-company","text":"We want to build infrastructure with which external parties build their own solutions.","title":"Open source company"},{"location":"#platform-for-start-ups","text":"By operating as a platform for start ups, we hope to solve the chicken-or-egg problem through incentive schemes.","title":"Platform for start ups"},{"location":"#agents","text":"An autonomous economic agent (AEA) is an intelligent agent whose goal is to generate economic value for its owner. Their super powers lie in their ability to autonomously acquire new skills. AEAs achieve their goals with the help of the OEF and the Fetch.AI Ledger. Third party systems, such as Ethereum, may also allow AEA integration. Note Work in progress.","title":"Agents"},{"location":"architecture/","text":"Note Work in progress. Core components The Envelope is the core object which agents use to communicate with each other. An Envelope has four attributes: to : defines the destination address sender : defines the sender address protocol_id : defines the protocol_id message : is a bytes field to hold the message in serialized form. Protocols Protocols define how messages are represented and encoded for transport. They also define the rules to which messages have to adhere in a message sequence. For instance, a protocol might have a message of type START and FINISH. Then the rules could prescribe that a message of type FINISH must be preceded by a message of type START. Connections A connection allows the AEA to connect to an external service which has a Python SDK or API. A connection wraps an external SDK or API. Skills A skill can encapsulate any code and ideally delivers economic value to the AEA. Each skill has at most a single Handler and potentially multiple Behaviours and Tasks. The Handler is responsible for dealing with messages of the protocol type for which this skill is registered, as such it encapsulates reactions . A Behaviour encapsulates actions , that is sequences of interactions with other agents initiated by the AEA. Finally, a Task encapsulates background work which is internal to the AEA. File structure An agent is structured in a directory with a configuration file, a directory with skills, a directory with protocols, a directory with connections and a main logic file that is used when running aea run. agentName/ agent.yml YAML configuration of the agent connections/ Directory containing all the supported connections connection1/ First connection ... ... connectionN/ nth connection protocols/ Directory containing all supported protocols protocol1/ First protocol ... ... protocolK/ kth protocol skills/ Directory containing all the skill components skill1/ First skill ... ... skillN/ nth skill","title":"Architecture"},{"location":"architecture/#core-components","text":"The Envelope is the core object which agents use to communicate with each other. An Envelope has four attributes: to : defines the destination address sender : defines the sender address protocol_id : defines the protocol_id message : is a bytes field to hold the message in serialized form.","title":"Core components"},{"location":"architecture/#protocols","text":"Protocols define how messages are represented and encoded for transport. They also define the rules to which messages have to adhere in a message sequence. For instance, a protocol might have a message of type START and FINISH. Then the rules could prescribe that a message of type FINISH must be preceded by a message of type START.","title":"Protocols"},{"location":"architecture/#connections","text":"A connection allows the AEA to connect to an external service which has a Python SDK or API. A connection wraps an external SDK or API.","title":"Connections"},{"location":"architecture/#skills","text":"A skill can encapsulate any code and ideally delivers economic value to the AEA. Each skill has at most a single Handler and potentially multiple Behaviours and Tasks. The Handler is responsible for dealing with messages of the protocol type for which this skill is registered, as such it encapsulates reactions . A Behaviour encapsulates actions , that is sequences of interactions with other agents initiated by the AEA. Finally, a Task encapsulates background work which is internal to the AEA.","title":"Skills"},{"location":"architecture/#file-structure","text":"An agent is structured in a directory with a configuration file, a directory with skills, a directory with protocols, a directory with connections and a main logic file that is used when running aea run. agentName/ agent.yml YAML configuration of the agent connections/ Directory containing all the supported connections connection1/ First connection ... ... connectionN/ nth connection protocols/ Directory containing all supported protocols protocol1/ First protocol ... ... protocolK/ kth protocol skills/ Directory containing all the skill components skill1/ First skill ... ... skillN/ nth skill","title":"File structure"},{"location":"cli_overview/","text":"CLI commands Command Description create [name] Create a new aea project. fetch [name] Fetch an aea project. scaffold connection/protocol/skill [name] Scaffold a new connection, protocol, or skill. publish agent/connection/protocol/skill [name] Publish agent, connection, protocol, or skill. add connection/protocol/skill [name] Add connection, protocol, or skill to agent. remove connection/protocol/skill [name] Remove connection, protocol, or skill from agent. run {using [connection, ...]} Run the agent on the Fetch.AI network with default or specified connections. -v DEBUG run Run with debugging. deploy {using [connection, ...]} Deploy the agent to a server and run it on the Fetch.AI network with default or specified connections. delete [name] Delete an aea project.","title":"CLI commands"},{"location":"cli_overview/#cli-commands","text":"Command Description create [name] Create a new aea project. fetch [name] Fetch an aea project. scaffold connection/protocol/skill [name] Scaffold a new connection, protocol, or skill. publish agent/connection/protocol/skill [name] Publish agent, connection, protocol, or skill. add connection/protocol/skill [name] Add connection, protocol, or skill to agent. remove connection/protocol/skill [name] Remove connection, protocol, or skill from agent. run {using [connection, ...]} Run the agent on the Fetch.AI network with default or specified connections. -v DEBUG run Run with debugging. deploy {using [connection, ...]} Deploy the agent to a server and run it on the Fetch.AI network with default or specified connections. delete [name] Delete an aea project.","title":"CLI commands"},{"location":"gym-plugin/","text":"The gym_ex example demonstrates to Reinforcement Learning developers the AEA framework's flexibility. There is no immediate use case for this example as you can train an RL agent without the AEA proxy layer just fine (and faster). However, the example decouples the RL agent from the gym.Env allowing them to run in separate environments, potentially owned by different entities. Quick start Dependencies pip install numpy gym Files You will have already downloaded the examples directory during the AEA quick start demo . cd examples/gym_ex Run the example python train.py Notice the usual RL setup, i.e. the fit method of the RL agent has the typical signature and a familiar implementation. Note how train.py demonstrates how easy it is to use an AEA agent as a proxy layer between an OpenAI gym.Env and a standard RL agent. It is just one line of code! from gyms.env import BanditNArmedRandom from proxy.env import ProxyEnv from rl.agent import RLAgent if __name__ == \"__main__\" : NB_GOODS = 10 NB_PRICES_PER_GOOD = 100 NB_STEPS = 4000 # Use any gym.Env compatible environment: gym_env = BanditNArmedRandom ( nb_bandits = NB_GOODS , nb_prices_per_bandit = NB_PRICES_PER_GOOD ) # Pass the gym environment to a proxy environment: proxy_env = ProxyEnv ( gym_env ) # Use any RL agent compatible with the gym environment and call the fit method: rl_agent = RLAgent ( nb_goods = NB_GOODS ) rl_agent . fit ( env = proxy_env , nb_steps = NB_STEPS )","title":"Gym efficiency demo"},{"location":"gym-plugin/#quick-start","text":"","title":"Quick start"},{"location":"gym-plugin/#dependencies","text":"pip install numpy gym","title":"Dependencies"},{"location":"gym-plugin/#files","text":"You will have already downloaded the examples directory during the AEA quick start demo . cd examples/gym_ex","title":"Files"},{"location":"gym-plugin/#run-the-example","text":"python train.py Notice the usual RL setup, i.e. the fit method of the RL agent has the typical signature and a familiar implementation. Note how train.py demonstrates how easy it is to use an AEA agent as a proxy layer between an OpenAI gym.Env and a standard RL agent. It is just one line of code! from gyms.env import BanditNArmedRandom from proxy.env import ProxyEnv from rl.agent import RLAgent if __name__ == \"__main__\" : NB_GOODS = 10 NB_PRICES_PER_GOOD = 100 NB_STEPS = 4000 # Use any gym.Env compatible environment: gym_env = BanditNArmedRandom ( nb_bandits = NB_GOODS , nb_prices_per_bandit = NB_PRICES_PER_GOOD ) # Pass the gym environment to a proxy environment: proxy_env = ProxyEnv ( gym_env ) # Use any RL agent compatible with the gym environment and call the fit method: rl_agent = RLAgent ( nb_goods = NB_GOODS ) rl_agent . fit ( env = proxy_env , nb_steps = NB_STEPS )","title":"Run the example"},{"location":"gym-skill/","text":"The AEA gym skill demonstrates how a custom Reinforcement Learning agent may be embedded into an Autonomous Economic Agent. Demo instructions Follow the Preliminaries and Installation instructions here . Create and launch a virtual environment. pipenv --python 3 .7 && pipenv shell Install the gym library. pip install gym Then, download the examples and channels directory. svn export https://github.com/fetchai/agents-aea.git/trunk/examples Create the agent In the root directory, create the gym agent. aea create my_gym_agent Add the gym skill cd my_gym_agent aea add skill gym Copy the gym environment to the agent directory mkdir gyms cp -a ../examples/gym_ex/gyms/. gyms/ Add a gym connection aea add connection gym Update the connection config nano connections/gym/connection.yaml env: gyms.env.BanditNArmedRandom Run the agent with the gym connection aea run --connection gym Delete the agent When you're done, you can delete the agent. aea delete my_first_agent","title":"AEA gym skill"},{"location":"gym-skill/#demo-instructions","text":"Follow the Preliminaries and Installation instructions here . Create and launch a virtual environment. pipenv --python 3 .7 && pipenv shell Install the gym library. pip install gym Then, download the examples and channels directory. svn export https://github.com/fetchai/agents-aea.git/trunk/examples","title":"Demo instructions"},{"location":"gym-skill/#create-the-agent","text":"In the root directory, create the gym agent. aea create my_gym_agent","title":"Create the agent"},{"location":"gym-skill/#add-the-gym-skill","text":"cd my_gym_agent aea add skill gym","title":"Add the gym skill"},{"location":"gym-skill/#copy-the-gym-environment-to-the-agent-directory","text":"mkdir gyms cp -a ../examples/gym_ex/gyms/. gyms/","title":"Copy the gym environment to the agent directory"},{"location":"gym-skill/#add-a-gym-connection","text":"aea add connection gym","title":"Add a gym connection"},{"location":"gym-skill/#update-the-connection-config","text":"nano connections/gym/connection.yaml env: gyms.env.BanditNArmedRandom","title":"Update the connection config"},{"location":"gym-skill/#run-the-agent-with-the-gym-connection","text":"aea run --connection gym","title":"Run the agent with the gym connection"},{"location":"gym-skill/#delete-the-agent","text":"When you're done, you can delete the agent. aea delete my_first_agent","title":"Delete the agent"},{"location":"integration/","text":"In this section, we show you how to integrate the AEA with third party ledgers. Fetch.AI Ledger Note Coming soon. Ethereum Note Coming soon. Etc. Note Coming soon.","title":"Integrate with third parties"},{"location":"integration/#fetchai-ledger","text":"Note Coming soon.","title":"Fetch.AI Ledger"},{"location":"integration/#ethereum","text":"Note Coming soon.","title":"Ethereum"},{"location":"integration/#etc","text":"Note Coming soon.","title":"Etc."},{"location":"protocol/","text":"Envelope Todo Sending stuff around Todo","title":"Protocol"},{"location":"protocol/#envelope","text":"Todo","title":"Envelope"},{"location":"protocol/#sending-stuff-around","text":"Todo","title":"Sending stuff around"},{"location":"quickstart/","text":"Preliminaries Create and cd into a new working directory. mkdir aea/ cd aea/ Check you have pipenv . which pipenv If you don't have it, install it. Instructions are here . Once installed, create a new environment and open it. pipenv --python 3 .7 && pipenv shell Installation Install the Autonomous Economic Agent framework. The following installs the basic application. pip install aea The following installs the whole package. pip install aea [ all ] The following installs just the cli. pip install aea [ cli ] Echo Agent demo Download the examples and scripts directories. svn export https://github.com/fetchai/agents-aea.git/trunk/examples svn export https://github.com/fetchai/agents-aea.git/trunk/scripts Create a new agent aea create my_first_agent Add the echo skill cd my_first_agent aea add skill echo Launch the OEF Open a new terminal and launch the OEF. python scripts/oef/launch.py -c ./scripts/oef/launch_config.json Run the agent locally Go back to the other terminal and run the agent. aea run You will see the echo task running in the terminal window. Delete the agent When you're done, you can delete the agent. aea delete my_first_agent","title":"AEA quick start"},{"location":"quickstart/#preliminaries","text":"Create and cd into a new working directory. mkdir aea/ cd aea/ Check you have pipenv . which pipenv If you don't have it, install it. Instructions are here . Once installed, create a new environment and open it. pipenv --python 3 .7 && pipenv shell","title":"Preliminaries"},{"location":"quickstart/#installation","text":"Install the Autonomous Economic Agent framework. The following installs the basic application. pip install aea The following installs the whole package. pip install aea [ all ] The following installs just the cli. pip install aea [ cli ]","title":"Installation"},{"location":"quickstart/#echo-agent-demo","text":"","title":"Echo Agent demo"},{"location":"quickstart/#download-the-examples-and-scripts-directories","text":"svn export https://github.com/fetchai/agents-aea.git/trunk/examples svn export https://github.com/fetchai/agents-aea.git/trunk/scripts","title":"Download the examples and scripts directories."},{"location":"quickstart/#create-a-new-agent","text":"aea create my_first_agent","title":"Create a new agent"},{"location":"quickstart/#add-the-echo-skill","text":"cd my_first_agent aea add skill echo","title":"Add the echo skill"},{"location":"quickstart/#launch-the-oef","text":"Open a new terminal and launch the OEF. python scripts/oef/launch.py -c ./scripts/oef/launch_config.json","title":"Launch the OEF"},{"location":"quickstart/#run-the-agent-locally","text":"Go back to the other terminal and run the agent. aea run You will see the echo task running in the terminal window.","title":"Run the agent locally"},{"location":"quickstart/#delete-the-agent","text":"When you're done, you can delete the agent. aea delete my_first_agent","title":"Delete the agent"},{"location":"scaffolding/","text":"Scaffold generator The scaffold generator builds out the entire directory structure required for creating a particular skill. For example, create a new AEA project. aea create new_project cd new_project Then, cd into your project directory and scaffold your project skill, protocol, or connection. You will see the directories filled out with the files required and the skill, protocol, or connection registered in the top level aea-config.yaml . Scaffold a skill aea scaffold skill new_skill Scaffold a protocol aea scaffold protocol new_protocol Scaffold a connection aea scaffold connection new_connection After running the above commands, you will have the fully constructured file system required by the AEA.","title":"Scaffolding"},{"location":"scaffolding/#scaffold-generator","text":"The scaffold generator builds out the entire directory structure required for creating a particular skill. For example, create a new AEA project. aea create new_project cd new_project Then, cd into your project directory and scaffold your project skill, protocol, or connection. You will see the directories filled out with the files required and the skill, protocol, or connection registered in the top level aea-config.yaml .","title":"Scaffold generator"},{"location":"scaffolding/#scaffold-a-skill","text":"aea scaffold skill new_skill","title":"Scaffold a skill"},{"location":"scaffolding/#scaffold-a-protocol","text":"aea scaffold protocol new_protocol","title":"Scaffold a protocol"},{"location":"scaffolding/#scaffold-a-connection","text":"aea scaffold connection new_connection After running the above commands, you will have the fully constructured file system required by the AEA.","title":"Scaffold a connection"},{"location":"skill/","text":"How? Todo Why? Todo Example Todo","title":"Skill"},{"location":"skill/#how","text":"Todo","title":"How?"},{"location":"skill/#why","text":"Todo","title":"Why?"},{"location":"skill/#example","text":"Todo","title":"Example"},{"location":"tac/","text":"TAC has its own repo. Follow the instructions below to build and run the TAC demo. Requirements Make sure you are running Docker and Docker Compose . Quick start Clone the repo to include submodules. git clone git@github.com:fetchai/agents-tac.git --recursive && cd agents-tac Check you have pipenv . which pipenv If you don't have it, install it. Instructions are here . Create and launch a virtual environment. pipenv --python 3 .7 && pipenv shell Install the dependencies. pipenv install Install the package. python setup.py install Run the launch script. This may take a while. python scripts/launch.py The visdom server is now running. The controller GUI at http://localhost:8097 provides real time insights. In the Environment tab, make sure you have the tac_controller environment selected. Alternative build and run - WIP In a new terminal window, clone the repo, build the sandbox, and launch it. git clone git@github.com:fetchai/agents-tac.git --recursive && cd agents-tac pipenv --python 3 .7 && pipenv shell python setup.py install cd sandbox && docker-compose build docker-compose up In a new terminal window, enter the virtual environment, and connect a template agent to the sandbox. pipenv shell python templates/v1/basic.py --name my_agent --dashboard Click through to the controller GUI . Launcher GUI Todo Possible gotchas Stop all running containers before restart. docker stop $( docker ps -q ) To remove all images, run the following command. # mac docker ps -q | xargs docker stop ; docker system prune -a","title":"TAC"},{"location":"tac/#requirements","text":"Make sure you are running Docker and Docker Compose .","title":"Requirements"},{"location":"tac/#quick-start","text":"Clone the repo to include submodules. git clone git@github.com:fetchai/agents-tac.git --recursive && cd agents-tac Check you have pipenv . which pipenv If you don't have it, install it. Instructions are here . Create and launch a virtual environment. pipenv --python 3 .7 && pipenv shell Install the dependencies. pipenv install Install the package. python setup.py install Run the launch script. This may take a while. python scripts/launch.py The visdom server is now running. The controller GUI at http://localhost:8097 provides real time insights. In the Environment tab, make sure you have the tac_controller environment selected.","title":"Quick start"},{"location":"tac/#alternative-build-and-run-wip","text":"In a new terminal window, clone the repo, build the sandbox, and launch it. git clone git@github.com:fetchai/agents-tac.git --recursive && cd agents-tac pipenv --python 3 .7 && pipenv shell python setup.py install cd sandbox && docker-compose build docker-compose up In a new terminal window, enter the virtual environment, and connect a template agent to the sandbox. pipenv shell python templates/v1/basic.py --name my_agent --dashboard Click through to the controller GUI .","title":"Alternative build and run - WIP"},{"location":"tac/#launcher-gui","text":"Todo","title":"Launcher GUI"},{"location":"tac/#possible-gotchas","text":"Stop all running containers before restart. docker stop $( docker ps -q ) To remove all images, run the following command. # mac docker ps -q | xargs docker stop ; docker system prune -a","title":"Possible gotchas"},{"location":"version/","text":"Current version of the Autonomous Econonmic Agent application is 0.1 .","title":"Version"}]}